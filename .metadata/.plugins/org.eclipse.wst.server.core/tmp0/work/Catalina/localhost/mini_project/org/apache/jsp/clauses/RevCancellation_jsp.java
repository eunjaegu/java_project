/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2024-05-01 06:57:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.clauses;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class RevCancellation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>예약 취소 정책</title>\r\n");
      out.write("<style>\r\n");
      out.write("  /* 여기에 CSS 스타일을 추가하세요 */\r\n");
      out.write("  body {\r\n");
      out.write("    font-family: Arial, sans-serif;\r\n");
      out.write("    margin: 20px;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  h1 {\r\n");
      out.write("    color: #333;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  p {\r\n");
      out.write("    line-height: 1.6;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <h1>예약 취소 정책</h1>\r\n");
      out.write("\r\n");
      out.write("  <p>이 사이트의 예약 취소 정책에 대해 다음과 같은 내용이 적용됩니다:</p>\r\n");
      out.write("\r\n");
      out.write("  <h2>예약 취소 기준</h2>\r\n");
      out.write("\r\n");
      out.write("  <p>예약 취소에 대한 기준은 다음과 같습니다:</p>\r\n");
      out.write("\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li>최소 24시간 전 예약 취소: 예약금 전액 환불</li>\r\n");
      out.write("    <li>24시간 이내 예약 취소: 예약금의 일부 차감 후 환불</li>\r\n");
      out.write("    <li>당일 예약 취소 또는 미도착: 예약금 환불 없음</li>\r\n");
      out.write("  </ul>\r\n");
      out.write("\r\n");
      out.write("  <h2>환불 정책</h2>\r\n");
      out.write("\r\n");
      out.write("  <p>환불 정책에 대한 내용은 다음과 같습니다:</p>\r\n");
      out.write("\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li>예약 취소 시 환불 처리 기준은 예약 취소 기준에 따릅니다.</li>\r\n");
      out.write("    <li>환불 처리는 최대 7일 이내에 완료됩니다.</li>\r\n");
      out.write("  </ul>\r\n");
      out.write("\r\n");
      out.write("  <h2>문의</h2>\r\n");
      out.write("\r\n");
      out.write("  <p>예약 취소 정책에 대한 추가 정보나 문의 사항이 있으신 경우, 고객 서비스에 문의하여 주시기 바랍니다.</p>\r\n");
      out.write("\r\n");
      out.write("  <!-- 필요한 내용을 여기에 계속 추가하세요 -->\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
